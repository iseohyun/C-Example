// * 인라인 함수 *
// 일반적인 함수는 호출을 하면, 호출 된 주소로 이동을 하여 명령을 수행하도록 합니다.
// 따라서, 함수를 100번을 이용하건, 함수를 1000번을 이용하건 메모리에 적재된 함수는 1개가 됩니다.
// 이는 메모리상에 큰 이득을 줍니다.
//
// 인라인 함수는 함수가 필요한 시점에 직접 함수를 복붙하는 것입니다.
// 물론 이렇게 구현하면 100번 호출하면, 메모리에 100번 적재되어 메모리가 크게 낭비될 것입니다.
// 하지만 호출 되는 시간을 줄여주어, 성능이 향상됩니다.
// 
// 기억하십시오.
//      메모리와 속도는 트레이드 오프 관계입니다. 
// 
// 얼마나 많은 메모리를 날려서, 얼마의 속도를 얻을 것인가는 굳이 인라인 함수를 떠나서도 
// 알고리즘 적으로 굉장히 많이 쓰이는 개념입니다.

#include <stdio.h>

inline int add(int a, int b)
{
    return a + b;
}

int main()
{
    int i;

    i = add(10, 20);

    printf("%d\n", i);
}